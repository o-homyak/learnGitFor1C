
//-----------------------------------------------------------------------
//Описание основной функциональьности текущего скрипта:

//Настраивает окружение  относительно текущего каталога
//допустим, что текущий каталог это каталог в котором и надо воспроизвести всю необходимую настройку.
//убедимся в этом проверив существование необходимых каталогов если не находим, воспроизводим команды (копирование, создание и другое)
//-----------------------------------------------------------------------

Функция ПолучитьКаталогРепозитариев()
	
    НомерВхождения = СтрНайти(ТекущийКаталог(),"\", НаправлениеПоиска.СКонца);
	Рез = Лев(ТекущийКаталог(), НомерВхождения-1);

	Возврат Рез;
КонецФункции

Процедура КопироватьСодержимоеКаталога(Откуда, Куда)

	КаталогНазначения = Новый Файл(Куда);
	Если КаталогНазначения.Существует() Тогда
		Если КаталогНазначения.ЭтоФайл() Тогда
			УдалитьФайлы(КаталогНазначения.ПолноеИмя);
			СоздатьКаталог(Куда);
		КонецЕсли;
	Иначе
		СоздатьКаталог(Куда);		
	КонецЕсли;

	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ИнициализацияКаталогаГит() 

    МассивНайденых = НайтиФайлы(ТекущийКаталог() + "\.git");
    Если МассивНайденых.Количество() = 0 Тогда
        Сообщить("Инициализация git...");
        ЗапуститьПриложение("git init"); //инициализация системного каталога без ввода пользовательских данных
    Иначе
        Сообщить("Уже найден каталог инициализации, пропущено создание.");    
    КонецЕсли;

КонецПроцедуры

Процедура НастроитьПрекомит()

	КаталогВсехРепо = ПолучитьКаталогРепозитариев();
	
	МассивНайденых = НайтиФайлы(КаталогВсехРепо + "\precommit1c");
    Если МассивНайденых.Количество() = 0 Тогда
        Сообщить("Не найден каталок-источник: " + КаталогВсехРепо + "\precommit1c");
        Возврат;  
    КонецЕсли;

    Откуда 	= КаталогВсехРепо + "\precommit1c\tools";
    Куда 	= ТекущийКаталог() + "\.git\hooks\tools";
    КопироватьСодержимоеКаталога(Откуда, Куда); // "tools"
	Сообщить("Скопирован каталог: tools");
	
	Откуда 	= КаталогВсехРепо + "\precommit1c\v8Reader";
    Куда 	= ТекущийКаталог() + "\.git\hooks\v8Reader";
    КопироватьСодержимоеКаталога(Откуда, Куда); // "v8Reader"
	Сообщить("Скопирован каталог: v8Reader");
	
	Откуда 	= КаталогВсехРепо + "\precommit1c\v8files-extractor.os";
    Куда 	= ТекущийКаталог() + "\.git\hooks\v8files-extractor.os";
   	КопироватьФайл(Откуда, Куда); // "v8files-extractor.os"
	Сообщить("Скопирован файл: v8files-extractor.os");
	
	Откуда 	= КаталогВсехРепо + "\precommit1c\pre-commit";
    Куда 	= ТекущийКаталог() + "\.git\hooks\pre-commit";
    КопироватьФайл(Откуда, Куда); // "pre-commit"
	Сообщить("Скопирован файл: pre-commit");

КонецПроцедуры    

Процедура НастроитьСтруктуруКаталогов()

	Текст = Новый ЗаписьТекста(ТекущийКаталог() + "\README.md", КодировкаТекста.ANSI);
	Текст.Закрыть();
	Сообщить("Создан файл: README.md");

	МассивКоренныхКаталогов = Новый Массив();
	МассивКоренныхКаталогов.Добавить("doc");
	МассивКоренныхКаталогов.Добавить("examples"); 
	МассивКоренныхКаталогов.Добавить("features");
	МассивКоренныхКаталогов.Добавить("lib");
	МассивКоренныхКаталогов.Добавить("license");
	МассивКоренныхКаталогов.Добавить("spec");
	МассивКоренныхКаталогов.Добавить("src");
	МассивКоренныхКаталогов.Добавить("tools");
	МассивКоренныхКаталогов.Добавить("vendor");

	Для каждого Каталог Из МассивКоренныхКаталогов Цикл
		
		Куда = ТекущийКаталог() + "\" + Каталог;
		Попытка
			СоздатьКаталог(Куда);
		Исключение
			Сообщить("Ошибка создания каталога: " + Каталог + " " + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;		
		
		Сообщить("Создан каталог: " + Каталог);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьНовыйРепозиторий()

	ИнициализацияКаталогаГит();
	НастроитьПрекомит();
	НастроитьСтруктуруКаталогов();

КонецПроцедуры    

НастроитьНовыйРепозиторий();